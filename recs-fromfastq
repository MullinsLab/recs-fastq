#!/usr/bin/env python
import sys, errno, json, argparse, textwrap
from Bio.SeqIO.QualityIO import FastqGeneralIterator

class FromFastQ:
    __version__ = '0.0.2'

    def __init__(self, args):
        opts = FromFastQ.parse_options(args)

        self.decode_quality = opts['decode_quality']
        self.filename_key   = opts['filename_key']

        if len(opts['files']):
            self.input = [
                (filename, FastqGeneralIterator(open(filename, "rU")))
                    for filename in opts['files'] ]
        else:
            self.input = [('NONE', FastqGeneralIterator(sys.stdin))]

    def run(self):
        for (filename, fastq) in self.input:
            for read in fastq:
                self.accept_input(filename, read)

    def accept_input(self, filename, read):
        (name, seq, q) = read
        record = {
            'name': name,
            'sequence': seq,
            'quality': q
        }
        if (self.filename_key):
            record[self.filename_key] = filename

        if (self.decode_quality):
            record['quality'] = [ ord(q) - 33 for q in record['quality'] ]

        self.push_record(record)

    def push_record(self, record):
        try:
            json.dump(record, sys.stdout, separators=(',', ':'))
            print
        except IOError as e:
            if e.errno == errno.EPIPE:
                sys.exit()
            else:
                raise e

    @classmethod
    def parse_options(this, args):
        parser = argparse.ArgumentParser(
            description = textwrap.dedent('''\
                Each sequence in the FastQ input files (or stdin) produces an
                output record with the keys name, sequence, and quality.

                This command is part of the App::RecordStream (recs) system.
                See https://recs.pl for more information.
            '''),
            epilog = textwrap.dedent('''\
                version %s
                Copyright 2015 by Thomas Sibley <trsibley@uw.edu>
                Mullins Lab - Dept. of Microbiology
                University of Washington
            ''' % this.__version__),
            formatter_class = BetterFormatter)

        parser.add_argument("files",
            help     = "FastQ input files",
            nargs    = "*",
            metavar  = "input.fastq")

        parser.add_argument("-Q", "--decode-quality",
            action   = "store_true",
            dest     = "decode_quality",
            help     = "Decode Phred+33 quality string into integer scores")

        parser.add_argument("--fk", "--filename-key",
            dest     = "filename_key",
            type     = str,
            help     = "Add a key FIELD set to the source filename (if no filename is applicable will put NONE)",
            metavar  = "FIELD")

        return vars(parser.parse_args(args))

class BetterFormatter(argparse.ArgumentDefaultsHelpFormatter, argparse.RawDescriptionHelpFormatter):
    pass

if __name__ == '__main__':
    FromFastQ(sys.argv[1:]).run()
